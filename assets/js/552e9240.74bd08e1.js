"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[387],{902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"modules/graph-layers/api-reference/layouts/d3-layout","title":"D3ForceLayout","description":"This layout is an integration between d3-force and graph-layers to render the layout in a WebGL context.","source":"@site/../docs/modules/graph-layers/api-reference/layouts/d3-layout.md","sourceDirName":"modules/graph-layers/api-reference/layouts","slug":"/modules/graph-layers/api-reference/layouts/d3-layout","permalink":"/deck.gl-community/docs/modules/graph-layers/api-reference/layouts/d3-layout","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/graph-layers/api-reference/layouts/d3-layout.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SimpleLayout","permalink":"/deck.gl-community/docs/modules/graph-layers/api-reference/layouts/simple-layout"},"next":{"title":"Write your own custom layout","permalink":"/deck.gl-community/docs/modules/graph-layers/api-reference/layouts/custom-layout"}}');var i=t(4848),a=t(8453);const r={},s="D3ForceLayout",l={},c=[{value:"Configurations",id:"configurations",level:2},{value:"alpha (Number, optional)",id:"alpha-number-optional",level:4},{value:"resumeAlpha (Number, optional)",id:"resumealpha-number-optional",level:4},{value:"nBodyStrength: (Number, optional)",id:"nbodystrength-number-optional",level:4},{value:"nBodyDistanceMin (Number, optional)",id:"nbodydistancemin-number-optional",level:4},{value:"nBodyDistanceMax (Number, optional)",id:"nbodydistancemax-number-optional",level:4},{value:"getCollisionRadius (Number, optional)",id:"getcollisionradius-number-optional",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"d3forcelayout",children:"D3ForceLayout"})}),"\n",(0,i.jsx)("p",{align:"center",children:(0,i.jsx)("img",{src:"/gatsby/images/layouts/d3.png",height:"400"})}),"\n",(0,i.jsxs)(n.p,{children:["This layout is an integration between ",(0,i.jsx)(n.a,{href:"https://github.com/d3/d3-force",children:"d3-force"})," and graph-layers to render the layout in a WebGL context."]}),"\n",(0,i.jsx)(n.h2,{id:"configurations",children:"Configurations"}),"\n",(0,i.jsx)(n.p,{children:"You can set the custom configuration to the d3-force layout directed by passing a configuration object when instantiating the layout object for GraphGL."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"<GraphGL\n  {...otherProps}\n  layout={\n    new D3ForceLayout({\n      nBodyStrength: 10,\n      nBodyDistanceMin: 1,\n      nBodyDistanceMax: 10,\n    })\n  }\n/>\n"})}),"\n",(0,i.jsx)(n.h4,{id:"alpha-number-optional",children:"alpha (Number, optional)"}),"\n",(0,i.jsx)(n.p,{children:"The target alpha of the layout for each iteration. If alpha is specified, sets the current alpha to the specified number in the range [0,1]. The default value is 0.3."}),"\n",(0,i.jsx)(n.h4,{id:"resumealpha-number-optional",children:"resumeAlpha (Number, optional)"}),"\n",(0,i.jsx)(n.p,{children:"The resumeAlpha can be used to \u201creheat\u201d the simulation during interaction, such as when dragging a node, or to resume the simulation after temporarily pausing the layout.\nThe default value is 0.1."}),"\n",(0,i.jsx)(n.h4,{id:"nbodystrength-number-optional",children:"nBodyStrength: (Number, optional)"}),"\n",(0,i.jsxs)(n.p,{children:["We use ",(0,i.jsx)(n.a,{href:"https://github.com/d3/d3-force#many-body",children:"many-body"})," as the charge force to apply force applies mutually amongst all nodes. It can be used to simulate gravity (attraction) if the ",(0,i.jsx)(n.code,{children:"nBodyStrength"})," is positive, or electrostatic charge (repulsion) if the ",(0,i.jsx)(n.code,{children:"nBodyStrength"})," is negative.\nThe default value is -900."]}),"\n",(0,i.jsx)(n.h4,{id:"nbodydistancemin-number-optional",children:"nBodyDistanceMin (Number, optional)"}),"\n",(0,i.jsx)(n.p,{children:"Sets the minimum distance between nodes over which this force is considered. If distance is not 'nBodyDistanceMin', returns the current minimum distance, which defaults to 100."}),"\n",(0,i.jsx)(n.h4,{id:"nbodydistancemax-number-optional",children:"nBodyDistanceMax (Number, optional)"}),"\n",(0,i.jsx)(n.p,{children:"Sets the maximum distance between nodes over which this force is considered. If distance is not 'nBodyDistanceMin', returns the current minimum distance, which defaults to 400."}),"\n",(0,i.jsx)(n.h4,{id:"getcollisionradius-number-optional",children:"getCollisionRadius (Number, optional)"}),"\n",(0,i.jsxs)(n.p,{children:["Sets the radius for collision detection. If getCollisionRadius is not specified, it defaults to zero radius for all nodes.\nThe ",(0,i.jsx)(n.a,{href:"https://github.com/d3/d3-force#collision",children:"collision force"})," treats nodes as circles with a given radius, rather than points, and prevents nodes from overlapping."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);