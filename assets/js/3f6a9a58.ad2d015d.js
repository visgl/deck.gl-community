"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8766],{4462:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"modules/graph-layers/wip/react-graph-layers/api-reference/graphgl","title":"GraphGL","description":"Usage","source":"@site/../docs/modules/graph-layers/wip/react-graph-layers/api-reference/graphgl.md","sourceDirName":"modules/graph-layers/wip/react-graph-layers/api-reference","slug":"/modules/graph-layers/wip/react-graph-layers/api-reference/graphgl","permalink":"/deck.gl-community/docs/modules/graph-layers/wip/react-graph-layers/api-reference/graphgl","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/graph-layers/wip/react-graph-layers/api-reference/graphgl.md","tags":[],"version":"current","frontMatter":{}}');var d=n(4848),t=n(8453);const o={},s="GraphGL",c={},i=[{value:"Usage",id:"usage",level:3},{value:"<code>graph</code> (Graph, required)",id:"graph-graph-required",level:3},{value:"<code>layout</code> (Layout, required)",id:"layout-layout-required",level:3},{value:"<code>initialViewState</code> (Object, optional)",id:"initialviewstate-object-optional",level:3},{value:"<code>nodeStyle</code> (Array, required)",id:"nodestyle-array-required",level:3},{value:"<code>nodeEvents</code> (Object, optional)",id:"nodeevents-object-optional",level:3},{value:"<code>edgeStyle</code> (Object | Array, required)",id:"edgestyle-object--array-required",level:3},{value:"<code>edgeEvents</code> (Object, optional)",id:"edgeevents-object-optional",level:3}];function l(e){const r={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"graphgl",children:"GraphGL"})}),"\n",(0,d.jsx)("p",{align:"center",children:(0,d.jsx)("img",{src:"/gatsby/images/graph.png",height:"200"})}),"\n",(0,d.jsx)(r.h3,{id:"usage",children:"Usage"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"import GraphGL, {JSONLoader, NODE_TYPE, D3ForceLayout} from '@deck.gl-community/graph-layers';\n\nconst App = ({data}) => {\n  const graph = JSONLoader({\n    json: data,\n    nodeParser: (node) => ({id: node.id}),\n    edgeParser: (edge) => ({\n      id: edge.id,\n      sourceId: edge.sourceId,\n      targetId: edge.targetId,\n      directed: true\n    })\n  });\n  return (\n    <GraphGL\n      graph={graph}\n      layout={new D3ForceLayout()}\n      nodeStyle={[\n        {\n          type: NODE_TYPE.CIRCLE,\n          radius: 10,\n          fill: 'blue',\n          opacity: 1\n        }\n      ]}\n      edgeStyle={{\n        stroke: 'black',\n        strokeWidth: 2\n      }}\n      enableDragging\n    />\n  );\n};\n"})}),"\n",(0,d.jsxs)(r.h3,{id:"graph-graph-required",children:[(0,d.jsx)(r.code,{children:"graph"})," (Graph, required)"]}),"\n",(0,d.jsxs)(r.p,{children:["The graph data will need to be processed through JSONLoader and converted into ",(0,d.jsx)(r.code,{children:"Graph"})," object. The expected data should be an object includes two arrays: ",(0,d.jsx)(r.code,{children:"nodes"})," and ",(0,d.jsx)(r.code,{children:"edges"}),". Each node require an unique ",(0,d.jsx)(r.code,{children:"id"}),". Each edge should have ",(0,d.jsx)(r.code,{children:"id"})," as edge ID, ",(0,d.jsx)(r.code,{children:"sourceId"})," as the ID of the source node, and ",(0,d.jsx)(r.code,{children:"targetId"})," as the ID of the target node. For example:"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"const data = {\n  nodes: [{id: '1'}, {id: '2'}, {id: '3'}],\n  edges: [\n    {id: 'e1', sourceId: '1', targetId: '2'},\n    {id: 'e2', sourceId: '1', targetId: '3'},\n    {id: 'e3', sourceId: '2', targetId: '3'}\n  ]\n};\n"})}),"\n",(0,d.jsxs)(r.p,{children:["Then, you can convert the data into ",(0,d.jsx)(r.code,{children:"Graph"})," by ",(0,d.jsx)(r.code,{children:"JSONLoader"}),":"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"import {JSONLoader} from '@deck.gl-community/graph-layers';\nconst graph = JSONLoader({json: data});\n"})}),"\n",(0,d.jsxs)(r.h3,{id:"layout-layout-required",children:[(0,d.jsx)(r.code,{children:"layout"})," (Layout, required)"]}),"\n",(0,d.jsx)(r.p,{children:"Use one of the layouts provided by @deck.gl-community/graph-layers or create a new custom layout class by following the instruction. For more detail, please see the Layout docs/api-reference/layout section."}),"\n",(0,d.jsxs)(r.h3,{id:"initialviewstate-object-optional",children:[(0,d.jsx)(r.code,{children:"initialViewState"})," (Object, optional)"]}),"\n",(0,d.jsx)(r.p,{children:"For more detail, please see /docs/api-reference/viewport."}),"\n",(0,d.jsxs)(r.h3,{id:"nodestyle-array-required",children:[(0,d.jsx)(r.code,{children:"nodeStyle"})," (Array, required)"]}),"\n",(0,d.jsx)(r.p,{children:"A node is made of a set of layers. nodeStyle is a set of style objects to describe the style for each layer.\nFor more detail, please see the (explanation of nodeStyle](docs/api-reference/node-style)."}),"\n",(0,d.jsxs)(r.h3,{id:"nodeevents-object-optional",children:[(0,d.jsx)(r.code,{children:"nodeEvents"})," (Object, optional)"]}),"\n",(0,d.jsx)(r.p,{children:"For more detail, please see the interactions reference /docs/api-reference/interactions."}),"\n",(0,d.jsxs)(r.h3,{id:"edgestyle-object--array-required",children:[(0,d.jsx)(r.code,{children:"edgeStyle"})," (Object | Array, required)"]}),"\n",(0,d.jsx)(r.p,{children:"For more detail, please see the explanation of edgeStyle docs/api-reference/edge-style"}),"\n",(0,d.jsxs)(r.h3,{id:"edgeevents-object-optional",children:[(0,d.jsx)(r.code,{children:"edgeEvents"})," (Object, optional)"]}),"\n",(0,d.jsx)(r.p,{children:"For more detail, please see api-reference interactions docs/api-reference/interactions."})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var a=n(6540);const d={},t=a.createContext(d);function o(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);