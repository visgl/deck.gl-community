"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9668],{6717:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"modules/infovis-layers/api-reference/multi-horizon-graph-layer","title":"MultiHorizonGraphLayer","description":"Render multiple horizon graphs stacked vertically. Each series is drawn using an underlying HorizonGraphLayer and optional divider lines.","source":"@site/../docs/modules/infovis-layers/api-reference/multi-horizon-graph-layer.md","sourceDirName":"modules/infovis-layers/api-reference","slug":"/modules/infovis-layers/api-reference/multi-horizon-graph-layer","permalink":"/deck.gl-community/docs/modules/infovis-layers/api-reference/multi-horizon-graph-layer","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/infovis-layers/api-reference/multi-horizon-graph-layer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HorizonGraphLayer","permalink":"/deck.gl-community/docs/modules/infovis-layers/api-reference/horizon-graph-layer"},"next":{"title":"TimeAxisLayer","permalink":"/deck.gl-community/docs/modules/infovis-layers/api-reference/time-axis-layer"}}');var n=i(4848),l=i(8453);const s={},d="MultiHorizonGraphLayer",c={},a=[{value:"Properties",id:"properties",level:2},{value:"<code>data</code> (Array, required)",id:"data-array-required",level:3},{value:"<code>getSeries</code> (Accessor, optional)",id:"getseries-accessor-optional",level:3},{value:"<code>getScale</code> (Accessor, optional)",id:"getscale-accessor-optional",level:3},{value:"<code>bands</code> (Number, optional)",id:"bands-number-optional",level:3},{value:"<code>positiveColor</code> (Color, optional)",id:"positivecolor-color-optional",level:3},{value:"<code>negativeColor</code> (Color, optional)",id:"negativecolor-color-optional",level:3},{value:"<code>dividerColor</code> (Color, optional)",id:"dividercolor-color-optional",level:3},{value:"<code>dividerWidth</code> (Number, optional)",id:"dividerwidth-number-optional",level:3},{value:"<code>x</code>, <code>y</code>, <code>width</code>, <code>height</code> (Number, optional)",id:"x-y-width-height-number-optional",level:3},{value:"Sub Layers",id:"sub-layers",level:2},{value:"Source",id:"source",level:2}];function t(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"multihorizongraphlayer",children:"MultiHorizonGraphLayer"})}),"\n",(0,n.jsxs)(r.p,{children:["Render multiple horizon graphs stacked vertically. Each series is drawn using an underlying ",(0,n.jsx)(r.code,{children:"HorizonGraphLayer"})," and optional divider lines."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"import {MultiHorizonGraphLayer} from '@deck.gl-community/infovis-layers';\n\nnew MultiHorizonGraphLayer({\n  id: 'multi-horizon',\n  data: series,\n  getSeries: d => d.values,\n  getScale: d => d.scale,\n  bands: 2,\n  dividerColor: [0, 0, 0],\n  dividerWidth: 2,\n  width: 800,\n  height: 300\n});\n"})}),"\n",(0,n.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsxs)(r.p,{children:["Inherits from all ",(0,n.jsx)(r.a,{href:"https://deck.gl/docs/api-reference/core/composite-layer",children:"CompositeLayer"})," properties."]}),"\n",(0,n.jsxs)(r.h3,{id:"data-array-required",children:[(0,n.jsx)(r.code,{children:"data"})," (Array, required)"]}),"\n",(0,n.jsx)(r.p,{children:"Collection of series objects."}),"\n",(0,n.jsxs)(r.h3,{id:"getseries-accessor-optional",children:[(0,n.jsx)(r.code,{children:"getSeries"})," (Accessor, optional)"]}),"\n",(0,n.jsxs)(r.p,{children:["Extracts the numeric series from each object. Default: ",(0,n.jsx)(r.code,{children:"series => series.values"}),"."]}),"\n",(0,n.jsxs)(r.h3,{id:"getscale-accessor-optional",children:[(0,n.jsx)(r.code,{children:"getScale"})," (Accessor, optional)"]}),"\n",(0,n.jsxs)(r.p,{children:["Returns the value scaling factor for each series. Default: ",(0,n.jsx)(r.code,{children:"series => series.scale"}),"."]}),"\n",(0,n.jsxs)(r.h3,{id:"bands-number-optional",children:[(0,n.jsx)(r.code,{children:"bands"})," (Number, optional)"]}),"\n",(0,n.jsxs)(r.p,{children:["Number of color bands for each series. Default: ",(0,n.jsx)(r.code,{children:"2"}),"."]}),"\n",(0,n.jsxs)(r.h3,{id:"positivecolor-color-optional",children:[(0,n.jsx)(r.code,{children:"positiveColor"})," (Color, optional)"]}),"\n",(0,n.jsxs)(r.p,{children:["Color for positive values. Default: ",(0,n.jsx)(r.code,{children:"[0, 128, 0]"}),"."]}),"\n",(0,n.jsxs)(r.h3,{id:"negativecolor-color-optional",children:[(0,n.jsx)(r.code,{children:"negativeColor"})," (Color, optional)"]}),"\n",(0,n.jsxs)(r.p,{children:["Color for negative values. Default: ",(0,n.jsx)(r.code,{children:"[0, 0, 255]"}),"."]}),"\n",(0,n.jsxs)(r.h3,{id:"dividercolor-color-optional",children:[(0,n.jsx)(r.code,{children:"dividerColor"})," (Color, optional)"]}),"\n",(0,n.jsxs)(r.p,{children:["Color of the divider lines. Default: ",(0,n.jsx)(r.code,{children:"[0, 0, 0]"}),"."]}),"\n",(0,n.jsxs)(r.h3,{id:"dividerwidth-number-optional",children:[(0,n.jsx)(r.code,{children:"dividerWidth"})," (Number, optional)"]}),"\n",(0,n.jsxs)(r.p,{children:["Thickness of divider lines in pixels. Default: ",(0,n.jsx)(r.code,{children:"2"}),"."]}),"\n",(0,n.jsxs)(r.h3,{id:"x-y-width-height-number-optional",children:[(0,n.jsx)(r.code,{children:"x"}),", ",(0,n.jsx)(r.code,{children:"y"}),", ",(0,n.jsx)(r.code,{children:"width"}),", ",(0,n.jsx)(r.code,{children:"height"})," (Number, optional)"]}),"\n",(0,n.jsxs)(r.p,{children:["Position and size of the entire chart. Defaults: ",(0,n.jsx)(r.code,{children:"x:0"}),", ",(0,n.jsx)(r.code,{children:"y:0"}),", ",(0,n.jsx)(r.code,{children:"width:800"}),", ",(0,n.jsx)(r.code,{children:"height:300"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"sub-layers",children:"Sub Layers"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["One ",(0,n.jsx)(r.code,{children:"HorizonGraphLayer"})," per series"]}),"\n",(0,n.jsxs)(r.li,{children:["Optional ",(0,n.jsx)(r.code,{children:"SolidPolygonLayer"})," for divider rectangles"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"source",children:"Source"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://github.com/visgl/deck.gl/tree/master/modules/infovis-layers/src/layers/horizon-graph-layer",children:"modules/infovis-layers/src/layers/horizon-graph-layer"})})]})}function h(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},8453:(e,r,i)=>{i.d(r,{R:()=>s,x:()=>d});var o=i(6540);const n={},l=o.createContext(n);function s(e){const r=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(l.Provider,{value:r},e.children)}}}]);