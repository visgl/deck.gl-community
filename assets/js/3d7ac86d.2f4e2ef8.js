"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9265],{7965:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"modules/editable-layers/api-reference/layers/selection-layer","title":"SelectionLayer","description":"This layer can be used to select deck.gl objects using mouse drawing.","source":"@site/../docs/modules/editable-layers/api-reference/layers/selection-layer.md","sourceDirName":"modules/editable-layers/api-reference/layers","slug":"/modules/editable-layers/api-reference/layers/selection-layer","permalink":"/deck.gl-community/docs/modules/editable-layers/api-reference/layers/selection-layer","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/editable-layers/api-reference/layers/selection-layer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"EditableGeoJsonLayer","permalink":"/deck.gl-community/docs/modules/editable-layers/api-reference/layers/editable-geojson-layer"},"next":{"title":"MeshLayer","permalink":"/deck.gl-community/docs/modules/editable-layers/api-reference/layers/mesh-layer"}}');var l=r(4848),i=r(8453);const s={},o="SelectionLayer",a={},c=[{value:"Properties",id:"properties",level:2},{value:"<code>selectionType</code> (String, required)",id:"selectiontype-string-required",level:4},{value:"<code>onSelect</code> (Function, required)",id:"onselect-function-required",level:4},{value:"<code>layerIds</code> (String[], required)",id:"layerids-string-required",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"selectionlayer",children:"SelectionLayer"})}),"\n",(0,l.jsx)(n.p,{children:"This layer can be used to select deck.gl objects using mouse drawing."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { SelectionLayer } from '@deck.gl-community/editable-layers';\nimport { StaticMap } from 'react-map-gl';\n\nconst MAPBOX_ACCESS_TOKEN = ''; // add your mapbox token here\n\nconst initialViewState = {\n  longitude: -73.986022,\n  latitude: 40.730743,\n  zoom: 12,\n};\n\nconst MALE_COLOR = [0, 128, 255];\nconst FEMALE_COLOR = [255, 0, 128];\nconst DATA_URL =\n  'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/scatterplot/manhattan.json'; // eslint-disable-line\n\nconst App = function () {\n  const radius = 30;\n  const maleColor = MALE_COLOR;\n  const femaleColor = FEMALE_COLOR;\n  const data = fetch(DATA_URL).then((resp) => resp.json());\n\n  const layers = [\n    new ScatterplotLayer({\n      id: 'scatter-plot',\n      data,\n      radiusScale: radius,\n      radiusMinPixels: 0.25,\n      getPosition: (d) => [d[0], d[1], 0],\n      getFillColor: (d) => (d[2] === 1 ? maleColor : femaleColor),\n      getRadius: 1,\n      pickable: true,\n      updateTriggers: {\n        getFillColor: [maleColor, femaleColor],\n      },\n    }),\n    new SelectionLayer({\n      id: 'selection',\n      selectionType: 'rectangle',\n      onSelect: ({ pickingInfos }) => {},\n      layerIds: ['scatter-plot'],\n      getTentativeFillColor: () => [255, 0, 255, 100],\n      getTentativeLineColor: () => [0, 0, 255, 255],\n      getTentativeLineDashArray: () => [0, 0],\n      lineWidthMinPixels: 1,\n    }),\n  ];\n\n  return (\n    <DeckGL initialViewState={initialViewState} controller={true} layers={layers}>\n      <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n    </DeckGL>\n  );\n};\n"})}),"\n",(0,l.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsxs)(n.p,{children:["Inherits all ",(0,l.jsx)(n.a,{href:"https://deck.gl/docs/api-reference/core/layer",children:"deck.gl's Base Layer"})," properties."]}),"\n",(0,l.jsxs)(n.p,{children:["Also inherites ",(0,l.jsx)(n.strong,{children:"some"})," EditableGeoJsonLayer properties."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Note: do not pass a data property."}),"\n"]}),"\n",(0,l.jsxs)(n.h4,{id:"selectiontype-string-required",children:[(0,l.jsx)(n.code,{children:"selectionType"})," (String, required)"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Default: ",(0,l.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Either ",(0,l.jsx)(n.code,{children:"rectangle"})," or ",(0,l.jsx)(n.code,{children:"polygon"})]}),"\n",(0,l.jsxs)(n.h4,{id:"onselect-function-required",children:[(0,l.jsx)(n.code,{children:"onSelect"})," (Function, required)"]}),"\n",(0,l.jsx)(n.p,{children:"Called when selection is completed."}),"\n",(0,l.jsxs)(n.h4,{id:"layerids-string-required",children:[(0,l.jsx)(n.code,{children:"layerIds"})," (String[], required)"]}),"\n",(0,l.jsx)(n.p,{children:"Array of layer ids where we will search."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(6540);const l={},i=t.createContext(l);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);