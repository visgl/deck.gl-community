{
  "version": 3,
  "sources": ["src/index.ts", "src/layers/raster-layer/raster-layer.ts", "src/layers/raster-layer/raster-layer.fs.ts", "src/layers/raster-layer/raster-layer.vs.ts", "src/layers/images.ts", "src/layers/util.ts", "src/layers/raster-mesh-layer/raster-mesh-layer.ts", "src/layers/raster-mesh-layer/matrix.ts", "src/layers/raster-mesh-layer/raster-mesh-layer.fs.ts", "src/layers/raster-mesh-layer/raster-mesh-layer.vs.ts", "src/shadermodules/texture/combine-bands.ts", "src/shadermodules/texture/rgba-image.ts", "src/shadermodules/texture/mask.ts", "src/shadermodules/texture/reorder-bands.ts", "src/shadermodules/color/colormap.ts", "src/shadermodules/color/linear-rescale.ts", "src/shadermodules/color/sigmoidal-contrast.ts", "src/shadermodules/color/gamma-contrast.ts", "src/shadermodules/color/saturation.ts", "src/shadermodules/color/filter.ts", "src/shadermodules/pansharpen/pansharpen-brovey.ts", "src/shadermodules/spectral-indices/evi.ts", "src/shadermodules/spectral-indices/msavi.ts", "src/shadermodules/spectral-indices/normalized-difference.ts", "src/shadermodules/spectral-indices/savi.ts"],
  "sourcesContent": ["// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nexport {RasterLayer} from './layers/raster-layer/raster-layer';\nexport {RasterMeshLayer} from './layers/raster-mesh-layer/raster-mesh-layer';\n\nexport type {ShaderModule} from './shadermodules/types';\n\n// Create texture\nexport {\n  combineBandsFloat,\n  combineBandsUint,\n  combineBandsInt\n} from './shadermodules/texture/combine-bands';\nexport {rgbaImage} from './shadermodules/texture/rgba-image';\nexport {maskFloat, maskUint, maskInt} from './shadermodules/texture/mask';\nexport {reorderBands} from './shadermodules/texture/reorder-bands';\n\n// Color operations\nexport {colormap} from './shadermodules/color/colormap';\nexport {linearRescale} from './shadermodules/color/linear-rescale';\nexport {sigmoidalContrast} from './shadermodules/color/sigmoidal-contrast';\nexport {gammaContrast} from './shadermodules/color/gamma-contrast';\nexport {saturation} from './shadermodules/color/saturation';\nexport {filter} from './shadermodules/color/filter';\n\n// Pansharpening\nexport {pansharpenBrovey} from './shadermodules/pansharpen/pansharpen-brovey';\n\n// Spectral indices\nexport {enhancedVegetationIndex} from './shadermodules/spectral-indices/evi';\nexport {modifiedSoilAdjustedVegetationIndex} from './shadermodules/spectral-indices/msavi';\nexport {normalizedDifference} from './shadermodules/spectral-indices/normalized-difference';\nexport {soilAdjustedVegetationIndex} from './shadermodules/spectral-indices/savi';\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport type {UpdateParameters} from '@deck.gl/core';\nimport {project32} from '@deck.gl/core';\nimport {BitmapLayer} from '@deck.gl/layers';\nimport {ShaderAssembler} from '@luma.gl/shadertools';\n\nimport {fs} from './raster-layer.fs';\nimport {vs} from './raster-layer.vs';\nimport {loadImages} from '../images';\nimport type {RasterLayerAddedProps, ImageState} from '../types';\nimport {modulesEqual} from '../util';\n\nexport class RasterLayer extends BitmapLayer<RasterLayerAddedProps> {\n  static layerName = 'RasterLayer';\n  static defaultProps: any = {\n    modules: {type: 'array', value: [], compare: true},\n    images: {type: 'object', value: {}, compare: true},\n    moduleProps: {type: 'object', value: {}, compare: true}\n  };\n\n  // @ts-expect-error TODO - align with deck.gl\n  state: BitmapLayer<RasterLayerAddedProps>['state'] & {\n    images: ImageState;\n  };\n\n  initializeState(): void {\n    const shaderAssebler = ShaderAssembler.getDefaultShaderAssembler();\n\n    const fsStr1 = 'fs:DECKGL_MUTATE_COLOR(inout vec4 image, in vec2 coord)';\n    const fsStr2 = 'fs:DECKGL_CREATE_COLOR(inout vec4 image, in vec2 coord)';\n\n    // Only initialize shader hook functions _once globally_\n    // Since the program manager is shared across all layers, but many layers\n    // might be created, this solves the performance issue of always adding new\n    // hook functions. See #22\n    // @ts-expect-error TODO fix\n    if (!shaderAssebler._hookFunctions.includes(fsStr1)) {\n      shaderAssebler.addShaderHook(fsStr1);\n    }\n    // @ts-expect-error TODO fix\n    if (!shaderAssebler._hookFunctions.includes(fsStr2)) {\n      shaderAssebler.addShaderHook(fsStr2);\n    }\n\n    // images is a mapping from keys to Texture objects. The keys should match\n    // names of uniforms in shader modules\n    this.setState({images: {}});\n\n    super.initializeState();\n  }\n\n  draw({uniforms}: {uniforms: {[key: string]: any}}): void {\n    const {model, images, coordinateConversion, bounds} = this.state;\n\n    // Render the image\n    if (\n      !model ||\n      !images ||\n      Object.keys(images).length === 0 ||\n      !Object.values(images).every((item) => item)\n    ) {\n      return;\n    }\n\n    const {desaturate, moduleProps} = this.props;\n    // @ts-ignore TODO fix\n    const transparentColor = this.props.transparentColor?.map((x) => (x ? x / 255 : 0)) as number[];\n    const tintColor = this.props.tintColor?.slice(0, 3).map((x) => x / 255);\n\n    // TODO: port to UBOs\n    model.setUniforms({\n      ...uniforms,\n      desaturate,\n      transparentColor,\n      tintColor,\n      coordinateConversion,\n      bounds\n    });\n    model.updateModuleSettingsWebGL({\n      ...moduleProps,\n      ...images\n    });\n    model.draw(this.context.renderPass);\n  }\n\n  // Typed as any upstream\n  // https://github.com/visgl/deck.gl/blob/3ffdc5ef90ccf3d5699186f02c8807caadf70e3a/modules/core/src/lib/layer.ts#L440\n  getShaders() {\n    // const {device} = this.context;\n    const {modules = []} = this.props;\n    return {...super.getShaders(), vs, fs, modules: [project32, ...modules]};\n  }\n\n  // eslint-disable-next-line complexity\n  updateState(params: UpdateParameters<BitmapLayer<RasterLayerAddedProps>>): void {\n    const {props, oldProps, changeFlags} = params;\n    const modules = props && props.modules;\n    const oldModules = oldProps && oldProps.modules;\n\n    // setup model first\n    // If the list of modules changed, need to recompile the shaders\n    if (changeFlags.extensionsChanged || !modulesEqual(modules, oldModules)) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()?.invalidateAll();\n    }\n\n    if (props && props.images) {\n      this.updateImages({props, oldProps});\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model?.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager?.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  updateImages({\n    props,\n    oldProps\n  }: {\n    props: RasterLayerAddedProps;\n    oldProps: RasterLayerAddedProps;\n  }): void {\n    const {images} = this.state;\n    const {device} = this.context;\n\n    const newImages = loadImages({\n      device,\n      images,\n      imagesData: props.images,\n      oldImagesData: oldProps.images\n    });\n    if (newImages) {\n      this.setState({images: newImages});\n    }\n  }\n\n  finalizeState(): void {\n    super.finalizeState(this.context);\n\n    if (this.state.images) {\n      for (const image of Object.values(this.state.images)) {\n        if (Array.isArray(image)) {\n          image.map((x) => x && x.delete());\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          image && image.delete();\n        }\n      }\n    }\n  }\n}\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nexport const fs = /* glsl */ `\\\n#version 300 es\n#define SHADER_NAME raster-layer-fragment-shader\n\n// Ref https://www.khronos.org/registry/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf#page=60\nprecision mediump float;\nprecision mediump int;\nprecision mediump usampler2D;\n\nin vec2 vTexCoord;\nin vec2 vTexPos;\n\nout vec4 color;\n\nuniform float desaturate;\nuniform vec4 transparentColor;\nuniform vec3 tintColor;\nuniform float opacity;\n\nuniform float coordinateConversion;\nuniform vec4 bounds;\n\n/* projection utils */\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / PI / 2.0;\n\n// from degrees to Web Mercator\nvec2 lnglat_to_mercator(vec2 lnglat) {\n  float x = lnglat.x;\n  float y = clamp(lnglat.y, -89.9, 89.9);\n  return vec2(\n    radians(x) + PI,\n    PI + log(tan(PI * 0.25 + radians(y) * 0.5))\n  ) * WORLD_SCALE;\n}\n\n// from Web Mercator to degrees\nvec2 mercator_to_lnglat(vec2 xy) {\n  xy /= WORLD_SCALE;\n  return degrees(vec2(\n    xy.x - PI,\n    atan(exp(xy.y - PI)) * 2.0 - PI * 0.5\n  ));\n}\n/* End projection utils */\n\n// apply desaturation\nvec3 color_desaturate(vec3 color) {\n  float luminance = (color.r + color.g + color.b) * 0.333333333;\n  return mix(color, vec3(luminance), desaturate);\n}\n\n// apply tint\nvec3 color_tint(vec3 color) {\n  return color * tintColor;\n}\n\n// blend with background color\nvec4 apply_opacity(vec3 color, float alpha) {\n  if (transparentColor.a == 0.0) {\n    return vec4(color, alpha);\n  }\n  float blendedAlpha = alpha + transparentColor.a * (1.0 - alpha);\n  float highLightRatio = alpha / blendedAlpha;\n  vec3 blendedRGB = mix(transparentColor.rgb, color, highLightRatio);\n  return vec4(blendedRGB, blendedAlpha);\n}\n\nvec2 getUV(vec2 pos) {\n  return vec2(\n    (pos.x - bounds[0]) / (bounds[2] - bounds[0]),\n    (pos.y - bounds[3]) / (bounds[1] - bounds[3])\n  );\n}\n\nvoid main(void) {\n  vec2 uv = vTexCoord;\n  if (coordinateConversion < -0.5) {\n    vec2 lnglat = mercator_to_lnglat(vTexPos);\n    uv = getUV(lnglat);\n  } else if (coordinateConversion > 0.5) {\n    vec2 commonPos = lnglat_to_mercator(vTexPos);\n    uv = getUV(commonPos);\n  }\n\n  vec4 image;\n  DECKGL_CREATE_COLOR(image, vTexCoord);\n\n  DECKGL_MUTATE_COLOR(image, vTexCoord);\n\n  color = apply_opacity(color_tint(color_desaturate(image.rgb)), opacity);\n\n  geometry.uv = uv;\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n`;\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nexport const vs = /* glsl */ `\\\n#version 300 es\n#define SHADER_NAME raster-layer-vertex-shader\n\nprecision mediump float;\n\nin vec2 texCoords;\nin vec3 positions;\nin vec3 positions64Low;\n\nout vec2 vTexCoord;\nout vec2 vTexPos;\n\nuniform float coordinateConversion;\n\nconst vec3 pickingColor = vec3(1.0, 0.0, 0.0);\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = pickingColor;\n\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  vTexCoord = texCoords;\n\n  if (coordinateConversion < -0.5) {\n    vTexPos = geometry.position.xy;\n  } else if (coordinateConversion > 0.5) {\n    vTexPos = geometry.worldPosition.xy;\n  }\n\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n`;\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\n/* eslint-disable no-continue */\n\nimport type {SamplerProps, TextureProps} from '@luma.gl/core';\nimport {Device, Texture} from '@luma.gl/core';\nimport isEqual from 'lodash.isequal';\n\nimport type {ImageInput, ImageState} from './types';\n\n/**\n * Texture parameters that should work for every texture on both WebGL1 and WebGL2\n */\nconst DEFAULT_UNIVERSAL_SAMPLER_PROPS: SamplerProps = {\n  minFilter: 'nearest',\n  magFilter: 'nearest',\n  addressModeU: 'clamp-to-edge',\n  addressModeV: 'clamp-to-edge'\n};\n\ntype LoadImagesOptions = {\n  device: Device;\n  images: ImageState;\n  imagesData: ImageInput;\n  oldImagesData: ImageInput;\n};\n\n// eslint-disable-next-line complexity\nexport function loadImages({\n  device,\n  images,\n  imagesData,\n  oldImagesData\n}: LoadImagesOptions): ImageState | null {\n  // Change to `true` if we need to setState with a new `images` object\n  let imagesDirty = false;\n\n  // If there are any removed keys, which previously existed in oldProps and\n  // this.state.images but no longer exist in props, remove from the images\n  // object\n  if (oldImagesData) {\n    for (const key in oldImagesData) {\n      if (imagesData && !(key in imagesData) && key in images) {\n        delete images[key];\n        imagesDirty = true;\n      }\n    }\n  }\n\n  // Check if any keys of props.images have changed\n  const changedKeys: string[] = [];\n  for (const key in imagesData) {\n    // If oldProps.images didn't exist or it existed and this key didn't exist\n    if (!oldImagesData || (oldImagesData && !(key in oldImagesData))) {\n      changedKeys.push(key);\n      continue;\n    }\n\n    // Deep compare when the key previously existed to see if it changed\n    if (!isEqual(imagesData[key], oldImagesData[key])) {\n      changedKeys.push(key);\n    }\n  }\n\n  for (const key of changedKeys) {\n    const imageData = imagesData[key];\n    if (!imageData) {\n      continue;\n    }\n\n    const loadedItem = loadImageItem(device, imageData);\n    if (loadedItem) {\n      images[key] = loadedItem;\n    }\n    imagesDirty = true;\n  }\n\n  if (imagesDirty) {\n    return images;\n  }\n\n  return null;\n}\n\n/**\n * Load image items to webgl context\n * @param device GPU device\n * @param imageItem image item, might be single texture or array of textures\n * @returns loaded single webgl texture or array of webgl texture or null\n */\nfunction loadImageItem(\n  device: Device,\n  imageItem: TextureProps | Texture | (TextureProps | Texture)[]\n): null | Texture | Texture[] {\n  let result: null | Texture | Texture[];\n  if (Array.isArray(imageItem)) {\n    const dirtyResult = imageItem.map((x) => loadTexture(device, x));\n    result = [];\n    for (const texture of dirtyResult) {\n      if (texture) {\n        result.push(texture);\n      }\n    }\n    if (!result.length) {\n      result = null;\n    }\n  } else {\n    result = loadTexture(device, imageItem);\n  }\n  return result;\n}\n\n/**\n * Create Texture object from image data\n */\nfunction loadTexture(device: Device, imageProps: Texture | TextureProps): Texture | null {\n  if (!imageProps) {\n    return null;\n  }\n\n  if (imageProps instanceof Texture) {\n    return imageProps;\n  }\n\n  return device.createTexture({\n    ...imageProps,\n    sampler: DEFAULT_UNIVERSAL_SAMPLER_PROPS\n  });\n}\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {ShaderModule} from '../shadermodules/types';\n\n/**\n * Test if two lists of modules are equal\n *\n * @param modules     Modules list\n * @param oldModules  Modules list\n *\n * @return true if both lists are equal\n */\nexport function modulesEqual(modules: ShaderModule[], oldModules: ShaderModule[]): boolean {\n  if (modules.length !== oldModules.length) {\n    return false;\n  }\n\n  for (let i = 0; i < modules.length; i++) {\n    if (modules[i].name !== oldModules[i].name) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport type {UpdateParameters} from '@deck.gl/core';\nimport {project32, phongLighting, log} from '@deck.gl/core';\nimport type {SimpleMeshLayerProps} from '@deck.gl/mesh-layers';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {Model, Geometry} from '@luma.gl/engine';\nimport {ShaderAssembler} from '@luma.gl/shadertools';\n// import {UniformsOptions} from '@luma.gl/webgl/src/classes/uniforms';\n\nimport {shouldComposeModelMatrix} from './matrix';\nimport {fs} from './raster-mesh-layer.fs';\nimport {vs} from './raster-mesh-layer.vs';\nimport {loadImages} from '../images';\nimport type {RasterLayerAddedProps, ImageState} from '../types';\nimport {modulesEqual} from '../util';\n\ntype UniformsOptions = Record<string, any>;\n\ntype Mesh = SimpleMeshLayerProps['mesh'];\n\nfunction validateGeometryAttributes(attributes) {\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'RasterMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    }\n    return new Geometry(data);\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      topology: 'triangle-list',\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nexport class RasterMeshLayer extends SimpleMeshLayer<any, RasterLayerAddedProps> {\n  static layerName = 'RasterMeshLayer';\n  static defaultProps: any = {\n    modules: {type: 'array', value: [], compare: true},\n    images: {type: 'object', value: {}, compare: true},\n    moduleProps: {type: 'object', value: {}, compare: true}\n  };\n\n  // @ts-expect-error TODO align with deck.gl\n  state: SimpleMeshLayer<RasterLayerAddedProps>['state'] & {\n    images: ImageState;\n  };\n\n  initializeState(): void {\n    const shaderAssembler = ShaderAssembler.getDefaultShaderAssembler();\n\n    const fsStr1 = 'fs:DECKGL_MUTATE_COLOR(inout vec4 image, in vec2 coord)';\n    const fsStr2 = 'fs:DECKGL_CREATE_COLOR(inout vec4 image, in vec2 coord)';\n\n    // Only initialize shader hook functions _once globally_\n    // Since the program manager is shared across all layers, but many layers\n    // might be created, this solves the performance issue of always adding new\n    // hook functions. See #22\n    // @ts-expect-error TODO align with deck.gl\n    if (!shaderAssembler._hookFunctions.includes(fsStr1)) {\n      shaderAssembler.addShaderHook(fsStr1);\n    }\n    // @ts-expect-error TODO align with deck.gl\n    if (!shaderAssembler._hookFunctions.includes(fsStr2)) {\n      shaderAssembler.addShaderHook(fsStr2);\n    }\n\n    // images is a mapping from keys to Texture objects. The keys should match\n    // names of uniforms in shader modules\n    this.setState({images: {}});\n\n    super.initializeState();\n  }\n\n  getShaders(): any {\n    const {modules = []} = this.props;\n\n    return {\n      ...super.getShaders(),\n      vs,\n      fs,\n      modules: [project32, phongLighting, ...modules]\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState(params: UpdateParameters<SimpleMeshLayer<any, RasterLayerAddedProps>>): void {\n    const {props, oldProps, changeFlags, context} = params;\n    super.updateState({props, oldProps, changeFlags, context});\n\n    const modules = props && props.modules;\n    const oldModules = oldProps && oldProps.modules;\n\n    // If the list of modules changed, need to recompile the shaders\n    if (\n      props.mesh !== oldProps.mesh ||\n      changeFlags.extensionsChanged ||\n      !modulesEqual(modules, oldModules)\n    ) {\n      if (this.state.model) {\n        this.state.model.destroy();\n      }\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh);\n\n        // Typed as any along with upstream:\n        // https://github.com/visgl/deck.gl/blob/3ffdc5ef90ccf3d5699186f02c8807caadf70e3a/modules/mesh-layers/src/simple-mesh-layer/simple-mesh-layer.ts#LL269\n        const attributes = (props.mesh as any).attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager()?.invalidateAll();\n    }\n\n    if (props && props.images) {\n      this.updateImages({props, oldProps});\n    }\n\n    if (this.state.model) {\n      this.state.model.setTopology(this.props.wireframe ? 'line-strip' : 'triangle-list');\n    }\n  }\n\n  updateImages({\n    props,\n    oldProps\n  }: {\n    props: RasterLayerAddedProps;\n    oldProps: RasterLayerAddedProps;\n  }): void {\n    const {images} = this.state;\n    const {device} = this.context;\n\n    const newImages = loadImages({\n      device,\n      images,\n      imagesData: props.images,\n      oldImagesData: oldProps.images\n    });\n\n    if (newImages) {\n      this.setState({images: newImages});\n    }\n  }\n\n  draw({uniforms}: UniformsOptions): void {\n    const {model, images} = this.state;\n    const {moduleProps} = this.props;\n\n    // Render the image\n    if (\n      !model ||\n      !images ||\n      Object.keys(images).length === 0 ||\n      !Object.values(images).every((item) => item)\n    ) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    // TODO: port to UBOs\n    model.setUniforms(\n      Object.assign({}, uniforms, {\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n    );\n    model.updateModuleSettingsWebGL({\n      ...moduleProps,\n      ...images\n    });\n    model.draw(this.context.renderPass);\n  }\n\n  finalizeState(): void {\n    super.finalizeState(this.context);\n\n    if (this.state.images) {\n      for (const image of Object.values(this.state.images)) {\n        if (Array.isArray(image)) {\n          image.map((x) => x && x.delete());\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          image && image.delete();\n        }\n      }\n    }\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const {device} = this.context;\n\n    const model = new Model(\n      device,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      })\n    );\n\n    return model;\n  }\n}\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport type {CoordinateSystem} from '@deck.gl/core';\nimport {COORDINATE_SYSTEM, Viewport} from '@deck.gl/core';\n\n// only apply composeModelMatrix when in cartesian or meter_offsets coordinate system\n// with `composeModelMatrix` enabled, the rotation part of the layer's modelMatrix will be composed to instance's transformations\n// since rotating latitude and longitude can not provide meaningful results, hence `composeModelMatrix` is disabled\n// when in LNGLAT and LNGLAT_OFFSET coordinates.\nexport function shouldComposeModelMatrix(\n  viewport: Viewport,\n  coordinateSystem: CoordinateSystem\n): boolean {\n  return (\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ||\n    coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS ||\n    (coordinateSystem === COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial)\n  );\n}\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nexport const fs = /* glsl */ `\\\n#version 300 es\n#define SHADER_NAME raster-mesh-layer-fs\n\nprecision highp float;\n\nuniform bool hasTexture;\n\nuniform bool flatShading;\nuniform float opacity;\n\nin vec2 vTexCoord;\nin vec3 cameraPosition;\nin vec3 normals_commonspace;\nin vec4 position_commonspace;\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv = vTexCoord;\n  vec4 image;\n  DECKGL_CREATE_COLOR(image, vTexCoord);\n\n  DECKGL_MUTATE_COLOR(image, vTexCoord);\n\n  vec3 normal;\n  if (flatShading) {\n\n// NOTE(Tarek): This is necessary because\n// headless.gl reports the extension as\n// available but does not support it in\n// the shader.\n#ifdef DERIVATIVES_AVAILABLE\n    normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n#else\n    normal = vec3(0.0, 0.0, 1.0);\n#endif\n  } else {\n    normal = normals_commonspace;\n  }\n\n  vec3 lightColor = lighting_getLightColor(image.rgb, cameraPosition, position_commonspace.xyz, normal);\n  fragColor = vec4(lightColor, opacity);\n\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nexport const vs = /* glsl */ `\\\n#version 300 es\n#define SHADER_NAME raster-mesh-layer-vs\n\n// Scale the model\nuniform float sizeScale;\nuniform bool composeModelMatrix;\n\n// Primitive attributes\nin vec3 positions;\nin vec3 normals;\nin vec3 colors;\nin vec2 texCoords;\n\n// Instance attributes\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin mat3 instanceModelMatrix;\nin vec3 instanceTranslation;\n\n// Outputs to fragment shader\nout vec2 vTexCoord;\nout vec3 cameraPosition;\nout vec3 normals_commonspace;\nout vec4 position_commonspace;\nout vec4 vColor;\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = instancePickingColors;\n\n  vTexCoord = texCoords;\n  cameraPosition = project_uCameraPosition;\n  normals_commonspace = project_normal(instanceModelMatrix * normals);\n  vColor = vec4(colors * instanceColors.rgb, instanceColors.a);\n  geometry.normal = normals_commonspace;\n\n  vec3 pos = (instanceModelMatrix * positions) * sizeScale + instanceTranslation;\n\n  if (composeModelMatrix) {\n    DECKGL_FILTER_SIZE(pos, geometry);\n    gl_Position = project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), position_commonspace);\n  }\n  else {\n    pos = project_size(pos);\n    DECKGL_FILTER_SIZE(pos, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, pos, position_commonspace);\n  }\n\n  geometry.position = position_commonspace;\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Texture} from '@luma.gl/core';\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\nfunction getUniforms(opts: {imageBands?: Texture[]} = {}): GetUniformsOutput {\n  const {imageBands} = opts;\n\n  if (!imageBands || imageBands.length === 0) {\n    return null;\n  }\n\n  const [bitmapTextureR, bitmapTextureG, bitmapTextureB, bitmapTextureA] = imageBands;\n\n  return {\n    bitmapTextureR,\n    bitmapTextureG,\n    bitmapTextureB,\n    bitmapTextureA\n  };\n}\n\nconst fs = /* glsl */ `\\\nprecision mediump float;\nprecision mediump int;\nprecision mediump usampler2D;\n\n#ifdef SAMPLER_TYPE\n  uniform SAMPLER_TYPE bitmapTextureR;\n  uniform SAMPLER_TYPE bitmapTextureG;\n  uniform SAMPLER_TYPE bitmapTextureB;\n  uniform SAMPLER_TYPE bitmapTextureA;\n#else\n  uniform sampler2D bitmapTextureR;\n  uniform sampler2D bitmapTextureG;\n  uniform sampler2D bitmapTextureB;\n  uniform sampler2D bitmapTextureA;\n#endif\n`;\n\nconst combineBands: ShaderModule = {\n  name: 'combine-bands',\n  fs,\n  getUniforms,\n  defines: {\n    SAMPLER_TYPE: 'sampler2D'\n  },\n  inject: {\n    'fs:DECKGL_CREATE_COLOR': `\n    float channel1 = float(texture2D(bitmapTextureR, coord).r);\n    float channel2 = float(texture2D(bitmapTextureG, coord).r);\n    float channel3 = float(texture2D(bitmapTextureB, coord).r);\n    float channel4 = float(texture2D(bitmapTextureA, coord).r);\n\n    image = vec4(channel1, channel2, channel3, channel4);\n    `\n  }\n};\n\nexport const combineBandsFloat: ShaderModule = {\n  ...combineBands,\n  name: 'combine-bands-float'\n};\nexport const combineBandsUint: ShaderModule = {\n  ...combineBands,\n  name: 'combine-bands-uint',\n  defines: {\n    SAMPLER_TYPE: 'usampler2D'\n  }\n};\nexport const combineBandsInt: ShaderModule = {\n  ...combineBands,\n  name: 'combine-bands-int',\n  defines: {\n    SAMPLER_TYPE: 'isampler2D'\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Texture} from '@luma.gl/core';\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\nfunction getUniforms(opts: {imageRgba?: Texture} = {}): GetUniformsOutput {\n  const {imageRgba} = opts;\n\n  if (!imageRgba) {\n    return null;\n  }\n\n  return {\n    bitmapTextureRgba: imageRgba\n  };\n}\n\nconst fs = /* glsl */ `\\\nprecision mediump float;\nprecision mediump int;\nprecision mediump usampler2D;\n\n#ifdef SAMPLER_TYPE\n  uniform SAMPLER_TYPE bitmapTextureRgba;\n#else\n  uniform sampler2D bitmapTextureRgba;\n#endif\n`;\n\nexport const rgbaImage: ShaderModule = {\n  name: 'rgba-image',\n  fs,\n  getUniforms,\n  defines: {\n    SAMPLER_TYPE: 'sampler2D'\n  },\n  inject: {\n    'fs:DECKGL_CREATE_COLOR': `\n    image = vec4(texture2D(bitmapTextureRgba, coord));\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Texture} from '@luma.gl/core';\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\nconst inf = Math.pow(2, 62);\n\nfunction getUniforms(\n  opts: {imageMask?: Texture; maskKeepMin?: number; maskKeepMax?: number} = {}\n): GetUniformsOutput {\n  const {imageMask, maskKeepMin, maskKeepMax} = opts;\n  if (!imageMask) {\n    return null;\n  }\n\n  return {\n    bitmapTextureMask: imageMask,\n    uMaskKeepMin: Number.isFinite(maskKeepMin) ? maskKeepMin : -inf,\n    uMaskKeepMax: Number.isFinite(maskKeepMax) ? maskKeepMax : inf\n  };\n}\n\nconst fs = /* glsl */ `\\\nprecision mediump float;\nprecision mediump int;\nprecision mediump usampler2D;\n\n#ifdef SAMPLER_TYPE\n  uniform SAMPLER_TYPE bitmapTextureMask;\n#else\n  uniform sampler2D bitmapTextureMask;\n#endif\n\nuniform float uMaskKeepMin;\nuniform float uMaskKeepMax;\n`;\n\nconst mask: ShaderModule = {\n  name: 'mask-image',\n  fs,\n  getUniforms,\n  defines: {\n    SAMPLER_TYPE: 'sampler2D'\n  },\n  inject: {\n    'fs:DECKGL_CREATE_COLOR': `\n    float mask_value = float(texture2D(bitmapTextureMask, coord).r);\n    if (mask_value < uMaskKeepMin) discard;\n    if (mask_value > uMaskKeepMax) discard;\n    `\n  }\n};\n\nexport const maskFloat: ShaderModule = {\n  ...mask,\n  name: 'mask-image-float'\n};\nexport const maskUint: ShaderModule = {\n  ...mask,\n  name: 'mask-image-uint',\n  defines: {\n    SAMPLER_TYPE: 'usampler2D'\n  }\n};\nexport const maskInt: ShaderModule = {\n  ...mask,\n  name: 'mask-image-int',\n  defines: {\n    SAMPLER_TYPE: 'isampler2D'\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {ShaderModule, GetUniformsOutput} from '../types';\n\n/**\n * Reorder image bands on GPU\n * Uses a permutation matrix to reorder a vec4\n */\n\nconst fs = /* glsl */ `\\\nuniform mat4 uReorder;\n\nvec4 reorder_image(vec4 image, mat4 ordering) {\n  return image.rgba * ordering;\n}\n`;\n\nfunction getUniforms(opts: {ordering?: number[]} = {}): GetUniformsOutput {\n  const {ordering} = opts;\n\n  if (!ordering) {\n    return null;\n  }\n\n  return {\n    uReorder: constructPermutationMatrix(ordering)\n  };\n}\n\n/**\n * Construct permutation matrix from vector\n *\n * @param vector  Vector describing how to reorder bands\n *\n * @return a mat4 permutation matrix representing how to reorder bands\n */\nexport function constructPermutationMatrix(vector: number[]): number[] {\n  const mat4 = Array(16).fill(0);\n  let row = 0;\n  for (const index of vector) {\n    mat4[row * 4 + index] = 1;\n    row += 1;\n  }\n\n  // If input vector wasn't of length 4, add identity in final places\n  for (let r = row; r < 4; r++) {\n    mat4[r * 4 + r] = 1;\n  }\n\n  return mat4;\n}\n\nexport const reorderBands: ShaderModule = {\n  name: 'reorder-bands',\n  fs,\n  getUniforms,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = reorder_image(image, uReorder);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Texture} from '@luma.gl/core';\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\nconst fs = /* glsl */ `\\\nuniform sampler2D uColormapTexture;\nuniform int uHasCategoricalColors;\nuniform int uCategoricalMinValue;\nuniform int uCategoricalMaxValue;\nuniform int uMaxPixelValue;\n\n// Apply colormap texture given value\n// Since the texture only varies in the x direction, setting v to 0.5 as a\n// constant is fine\n// Assumes the input range of value is -1 to 1\nvec4 colormap(sampler2D cmap, vec4 image) {\n  vec2 uv;\n  if (uHasCategoricalColors == 1) {\n    float step = float(uMaxPixelValue) / float(uCategoricalMaxValue - uCategoricalMinValue);\n    uv = vec2(image.r * step, 0.5);\n  } else {\n    uv = vec2(0.5 * image.r + 0.5, 0.5);\n  }\n  vec4 color = texture2D(cmap, uv);\n  if(color.a <= 0.0) discard;\n  return color;\n}\n`;\n\nfunction getUniforms(\n  opts: {\n    imageColormap?: Texture;\n    minCategoricalBandValue?: number;\n    maxCategoricalBandValue?: number;\n    dataTypeMaxValue?: number;\n    maxPixelValue?: number;\n  } = {}\n): GetUniformsOutput {\n  const {\n    imageColormap,\n    minCategoricalBandValue,\n    maxCategoricalBandValue,\n    dataTypeMaxValue,\n    maxPixelValue\n  } = opts;\n\n  if (!imageColormap) {\n    return null;\n  }\n\n  const isSupportedDataType = Number.isFinite(dataTypeMaxValue);\n  const isCategorical =\n    isSupportedDataType &&\n    Number.isFinite(maxPixelValue) &&\n    Number.isFinite(minCategoricalBandValue) &&\n    Number.isFinite(maxCategoricalBandValue);\n  return {\n    uColormapTexture: imageColormap,\n    uHasCategoricalColors: isCategorical ? 1 : 0,\n    uCategoricalMinValue: Number.isFinite(minCategoricalBandValue) ? minCategoricalBandValue : 0,\n    uCategoricalMaxValue: Number.isFinite(maxCategoricalBandValue) ? maxCategoricalBandValue : 0,\n    uMaxPixelValue: Number.isFinite(maxPixelValue) ? maxPixelValue : 0\n  };\n}\n\nexport const colormap: ShaderModule = {\n  name: 'colormap',\n  fs,\n  getUniforms,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = colormap(uColormapTexture, image);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\nconst fs = /* glsl */ `\\\nuniform float linearRescaleScaler;\nuniform float linearRescaleOffset;\n\n// Perform a linear rescaling of image\nvec4 linear_rescale(vec4 arr, float scaler, float offset) {\n  return arr * scaler + offset;\n}\n`;\n\nfunction getUniforms(\n  opts: {linearRescaleScaler?: number; linearRescaleOffset?: number} = {}\n): GetUniformsOutput {\n  const {linearRescaleScaler, linearRescaleOffset} = opts;\n\n  if (!Number.isFinite(linearRescaleScaler) && !Number.isFinite(linearRescaleOffset)) {\n    return null;\n  }\n\n  return {\n    linearRescaleScaler: Number.isFinite(linearRescaleScaler) ? linearRescaleScaler : 1,\n    linearRescaleOffset: Number.isFinite(linearRescaleOffset) ? linearRescaleOffset : 0\n  };\n}\n\nexport const linearRescale: ShaderModule = {\n  name: 'linear_rescale',\n  fs,\n  getUniforms,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = linear_rescale(image, linearRescaleScaler, linearRescaleOffset);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\n// From mapbox/rio-color under the MIT License\n//\n// Sigmoidal contrast is a type of contrast control that\n// adjusts the contrast without saturating highlights or shadows.\n// It allows control over two factors:\n// the contrast range from light to dark, and where the middle value\n// of the mid-tones falls. The result is a non-linear and smooth\n// contrast change.\n// Parameters\n// ----------\n// arr : ndarray, float, 0 .. 1\n//     Array of color values to adjust\n// contrast : integer\n//     Enhances the intensity differences between the lighter and darker\n//     elements of the image. For example, 0 is none, 3 is typical and\n//     20 is a lot.\n// bias : float, between 0 and 1\n//     Threshold level for the contrast function to center on\n//     (typically centered at 0.5)\n// Notes\n// ----------\n// Sigmoidal contrast is based on the sigmoidal transfer function:\n// .. math:: g(u) = ( 1/(1 + e^{- \\alpha * u + \\beta)})\n// This sigmoid function is scaled so that the output is bound by\n// the interval [0, 1].\n// .. math:: ( 1/(1 + e^(\\beta * (\\alpha - u))) - 1/(1 + e^(\\beta * \\alpha)))/\n//     ( 1/(1 + e^(\\beta*(\\alpha - 1))) - 1/(1 + e^(\\beta * \\alpha)) )\n// Where :math: `\\alpha` is the threshold level, and :math: `\\beta` the\n// contrast factor to be applied.\n// References\n// ----------\n// .. [CT] Hany Farid \"Fundamentals of Image Processing\"\n//         http://www.cs.dartmouth.edu/farid/downloads/tutorials/fip.pdf\nconst fs = /* glsl */ `\\\n#define epsilon 0.00000001\n\nuniform float sigmoidalContrast;\nuniform float sigmoidalBias;\n\n// NOTE: Input array must have float values between 0 and 1!\n// NOTE: bias must be a scalar float between 0 and 1!\nvec4 calculateSigmoidalContrast(vec4 arr, float contrast, float bias) {\n  // We use the names alpha and beta to match documentation.\n  float alpha = bias;\n  float beta = contrast;\n\n  // alpha must be >= 0\n  alpha = clamp(alpha, epsilon, alpha);\n\n  if (beta > 0.) {\n    vec4 numerator = 1. / (1. + exp(beta * (alpha - arr))) - 1. / (\n      1. + exp(beta * alpha)\n    );\n    float denominator = 1. / (1. + exp(beta * (alpha - 1.))) - 1. / (\n      1. + exp(beta * alpha)\n    );\n    arr = numerator / denominator;\n  } else if (beta < 0.) {\n    arr = (\n      (beta * alpha) - log(\n        (\n          1.0 / (\n            (arr / (1.0 + exp((beta * alpha) - beta))) -\n            (arr / (1.0 + exp(beta * alpha))) +\n            (1.0 / (1.0 + exp(beta * alpha)))\n          )\n        ) - 1.0)\n    ) / beta;\n  }\n\n  return arr;\n}\n`;\n\nfunction getUniforms(\n  opts: {sigmoidalContrast?: number; sigmoidalBias?: number} = {}\n): GetUniformsOutput {\n  const {sigmoidalContrast, sigmoidalBias} = opts;\n\n  if (!(Number.isFinite(sigmoidalContrast) || Number.isFinite(sigmoidalBias))) {\n    return null;\n  }\n\n  return {\n    sigmoidalContrast: Number.isFinite(sigmoidalContrast) ? sigmoidalContrast : 0,\n    sigmoidalBias: Number.isFinite(sigmoidalBias) ? sigmoidalBias : 0.5\n  };\n}\n\nexport const sigmoidalContrast: ShaderModule = {\n  name: 'sigmoidalContrast',\n  fs,\n  getUniforms,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = calculateSigmoidalContrast(image, sigmoidalContrast, sigmoidalBias);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\n// Gamma correction is a nonlinear operation that\n// adjusts the image's channel values pixel-by-pixel according\n// to a power-law:\n//\n// .. math:: pixel_{out} = pixel_{in} ^ {gamma}\n//\n// Setting gamma (:math:gamma) to be less than 1.0 darkens the image and\n// setting gamma to be greater than 1.0 lightens it.\n\n// Parameters\n// ----------\n// gamma (:math:gamma): float\n//     Reasonable values range from 0.8 to 2.4.\n\n// NOTE: Input array must have float values between 0 and 1!\n// NOTE: gamma must be >= 0\nconst fs = /* glsl */ `\\\n#define epsilon 0.00000001\n\nuniform float gamma1;\nuniform float gamma2;\nuniform float gamma3;\nuniform float gamma4;\n\nfloat gammaContrast(float arr, float g) {\n  // Gamma must be > 0\n  g = clamp(g, epsilon, g);\n\n  return pow(arr, 1.0 / g);\n}\n\nvec4 gammaContrast(vec4 arr, float g1, float g2, float g3, float g4) {\n  arr.r = gammaContrast(arr.r, g1);\n  arr.g = gammaContrast(arr.g, g2);\n  arr.b = gammaContrast(arr.b, g3);\n  arr.a = gammaContrast(arr.a, g4);\n\n  return arr;\n}\n`;\n\nfunction getUniforms(\n  opts: {\n    gammaContrastValue?: number;\n    gammaContrastValue1?: number;\n    gammaContrastValue2?: number;\n    gammaContrastValue3?: number;\n    gammaContrastValue4?: number;\n  } = {}\n): GetUniformsOutput {\n  const {\n    gammaContrastValue,\n    gammaContrastValue1,\n    gammaContrastValue2,\n    gammaContrastValue3,\n    gammaContrastValue4\n  } = opts;\n\n  // Gamma must be > 0, so not using Number.isFinite is fine\n\n  if (gammaContrastValue) {\n    return {\n      gamma1: gammaContrastValue,\n      gamma2: gammaContrastValue,\n      gamma3: gammaContrastValue,\n      gamma4: gammaContrastValue\n    };\n  } else if (\n    gammaContrastValue1 ||\n    gammaContrastValue2 ||\n    gammaContrastValue3 ||\n    gammaContrastValue4\n  ) {\n    return {\n      gamma1: gammaContrastValue1 || 1,\n      gamma2: gammaContrastValue2 || 1,\n      gamma3: gammaContrastValue3 || 1,\n      gamma4: gammaContrastValue4 || 1\n    };\n  }\n\n  return null;\n}\n\nexport const gammaContrast: ShaderModule = {\n  name: 'gamma_contrast',\n  fs,\n  getUniforms,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = gammaContrast(image, gamma1, gamma2, gamma3, gamma4);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\n/**\n * Adjusts the saturation of a color.\n * From cesium:\n * https://github.com/CesiumGS/cesium/blob/master/Source/Shaders/Builtin/Functions/saturation.glsl\n *\n * @param {vec3} rgb The color.\n * @param {float} adjustment The amount to adjust the saturation of the color. Usually between 0 and 2.\n *\n * @returns {vec3} The color with the saturation adjusted.\n */\nconst fs = /* glsl */ `\\\nuniform float uSaturationValue;\nvec3 saturate(vec3 rgb, float adjustment) {\n    // Algorithm from Chapter 16 of OpenGL Shading Language\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    vec3 intensity = vec3(dot(rgb, W));\n    return mix(intensity, rgb, adjustment);\n}\n`;\n\nfunction getUniforms(opts: {saturationValue?: number} = {}): GetUniformsOutput {\n  const {saturationValue} = opts;\n\n  if (!saturationValue) {\n    return null;\n  }\n\n  return {\n    uSaturationValue: Number.isFinite(saturationValue) ? saturationValue : 1\n  };\n}\n\nexport const saturation: ShaderModule = {\n  name: 'saturation',\n  fs,\n  getUniforms,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = vec4(saturate(image.rgb, uSaturationValue), image.a);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\nconst fs = /* glsl */ `\\\nuniform float filterMin1;\nuniform float filterMax1;\nuniform float filterMin2;\nuniform float filterMax2;\nuniform float filterMin3;\nuniform float filterMax3;\nuniform float filterMin4;\nuniform float filterMax4;\n`;\n\n// You can't pass JS' -Infinity or Infinity to a shader as a uniform\nconst inf = Math.pow(2, 62);\n\n// eslint-disable-next-line complexity\nfunction getUniforms(\n  opts: {\n    filterMin1?: number;\n    filterMin2?: number;\n    filterMin3?: number;\n    filterMin4?: number;\n    filterMax1?: number;\n    filterMax2?: number;\n    filterMax3?: number;\n    filterMax4?: number;\n  } = {}\n): GetUniformsOutput {\n  const {\n    filterMin1,\n    filterMin2,\n    filterMin3,\n    filterMin4,\n    filterMax1,\n    filterMax2,\n    filterMax3,\n    filterMax4\n  } = opts;\n\n  if (\n    Number.isFinite(filterMin1) ||\n    Number.isFinite(filterMin2) ||\n    Number.isFinite(filterMin3) ||\n    Number.isFinite(filterMin4) ||\n    Number.isFinite(filterMax1) ||\n    Number.isFinite(filterMax2) ||\n    Number.isFinite(filterMax3) ||\n    Number.isFinite(filterMax4)\n  ) {\n    return {\n      filterMin1: Number.isFinite(filterMin1) ? filterMin1 : -inf,\n      filterMin2: Number.isFinite(filterMin2) ? filterMin2 : -inf,\n      filterMin3: Number.isFinite(filterMin3) ? filterMin3 : -inf,\n      filterMin4: Number.isFinite(filterMin4) ? filterMin4 : -inf,\n      filterMax1: Number.isFinite(filterMax1) ? filterMax1 : inf,\n      filterMax2: Number.isFinite(filterMax2) ? filterMax2 : inf,\n      filterMax3: Number.isFinite(filterMax3) ? filterMax3 : inf,\n      filterMax4: Number.isFinite(filterMax4) ? filterMax4 : inf\n    };\n  }\n\n  return null;\n}\n\nexport const filter: ShaderModule = {\n  name: 'filter',\n  fs,\n  getUniforms,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    if (image.r < filterMin1) discard;\n    if (image.g < filterMin2) discard;\n    if (image.b < filterMin3) discard;\n    if (image.a < filterMin4) discard;\n    if (image.r > filterMax1) discard;\n    if (image.g > filterMax2) discard;\n    if (image.b > filterMax3) discard;\n    if (image.a > filterMax4) discard;\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Texture} from '@luma.gl/core';\n\nimport {GetUniformsOutput, ShaderModule} from '../types';\n\n// Brovey Method: Each resampled, multispectral pixel is\n// multiplied by the ratio of the corresponding\n// panchromatic pixel intensity to the sum of all the\n// multispectral intensities.\n// Original code from https://github.com/mapbox/rio-pansharpen\n//\n// NOTE: I originally clamped the output to the 0-1 range. Clamping was removed\n// to support 16 bit-depth textures\n\nconst fs = /* glsl */ `\\\nprecision mediump usampler2D;\n\n#ifdef SAMPLER_TYPE\n  uniform SAMPLER_TYPE bitmapTexturePan;\n#else\n  uniform sampler2D bitmapTexturePan;\n#endif\n\nuniform float panWeight;\n\nfloat pansharpen_brovey_ratio(vec4 rgb, float pan, float weight) {\n  return pan / ((rgb.r + rgb.g + rgb.b * weight) / (2. + weight));\n}\n\nvec4 pansharpen_brovey_calc(vec4 rgb, float pan, float weight) {\n  float ratio = pansharpen_brovey_ratio(rgb, pan, weight);\n  return ratio * rgb;\n}\n`;\n\nfunction getUniforms(opts: {imagePan?: Texture; panWeight?: number} = {}): GetUniformsOutput {\n  const {imagePan, panWeight = 0.2} = opts;\n\n  if (!imagePan) {\n    return null;\n  }\n\n  return {\n    bitmapTexturePan: imagePan,\n    panWeight\n  };\n}\n\nexport const pansharpenBrovey: ShaderModule = {\n  name: 'pansharpen_brovey',\n  fs,\n  defines: {\n    SAMPLER_TYPE: 'sampler2D'\n  },\n  getUniforms,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    float pan_band = float(texture2D(bitmapTexturePan, coord).r);\n    image = pansharpen_brovey_calc(image, pan_band, panWeight);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {ShaderModule} from '../types';\n\n// Calculate enhanced vegetation index\n// Expected to be ordered:\n// red: Landsat 8 band 5\n// green: Landsat 8 band 4\n// blue: Landsat 8 band 2\n//\n// EVI = 2.5 * ((Band 5 \u2013 Band 4) / (Band 5 + 6 * Band 4 \u2013 7.5 * Band 2 + 1))\n// https://www.usgs.gov/land-resources/nli/landsat/landsat-enhanced-vegetation-index\nconst fs = /* glsl */ `\\\nfloat enhanced_vegetation_index_calc(vec4 image) {\n  float band5 = image.r;\n  float band4 = image.g;\n  float band2 = image.b;\n\n  float numerator = band5 - band4;\n  float denominator = band5 + (6. * band4) - (7.5 * band2) + 1.;\n  return 2.5 * (numerator / denominator);\n}\n`;\n\nexport const enhancedVegetationIndex: ShaderModule = {\n  name: 'enhanced_vegetation_index',\n  fs,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = vec4(enhanced_vegetation_index_calc(image), 0., 0., 0.);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {ShaderModule} from '../types';\n\n// Calculate modified soil-adjusted vegetation index\n// Expected to be ordered:\n// red: Landsat 8 band 5\n// green: Landsat 8 band 4\n//\n// MSAVI = (2 * Band 5 + 1 \u2013 sqrt ((2 * Band 5 + 1)^2 \u2013 8 * (Band 5 \u2013 Band 4))) / 2\n// https://www.usgs.gov/land-resources/nli/landsat/landsat-modified-soil-adjusted-vegetation-index\nconst fs = /* glsl */ `\\\nfloat modified_soil_adjusted_vegetation_index_calc(vec4 image) {\n  float band5 = image.r;\n  float band4 = image.g;\n\n  float to_sqrt = ((2. * band5 + 1.) * (2. * band5 + 1.)) - (8. * (band5 - band4));\n  return ((2. * band5) + 1. - sqrt(to_sqrt)) / 2.;\n}\n`;\n\nexport const modifiedSoilAdjustedVegetationIndex: ShaderModule = {\n  name: 'modified_soil_adjusted_vegetation_index',\n  fs,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = vec4(modified_soil_adjusted_vegetation_index_calc(image), 0., 0., 0.);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {ShaderModule} from '../types';\n\n// Calculate standard normalized difference\nconst fs = /* glsl */ `\\\nfloat normalized_difference_calc(vec4 image) {\n  return ((image.r - image.g) / (image.r + image.g));\n}\n`;\n\nexport const normalizedDifference: ShaderModule = {\n  name: 'normalized_difference',\n  fs,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = vec4(normalized_difference_calc(image), 0., 0., 0.);\n    `\n  }\n};\n", "// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {ShaderModule} from '../types';\n\n// Calculate soil-adjusted vegetation index\n// SAVI = ((Band 5 \u2013 Band 4) / (Band 5 + Band 4 + 0.5)) * (1.5).\n// https://www.usgs.gov/land-resources/nli/landsat/landsat-soil-adjusted-vegetation-index\nconst fs = /* glsl */ `\\\nfloat soil_adjusted_vegetation_index_calc(vec4 image) {\n  float band5 = image.r;\n  float band4 = image.g;\n\n  float numerator = band5 - band4;\n  float denominator = (band5 + band4 + 0.5) * 1.5;\n  return numerator / denominator;\n}\n`;\n\nexport const soilAdjustedVegetationIndex: ShaderModule = {\n  name: 'soil_adjusted_vegetation_index',\n  fs,\n  inject: {\n    'fs:DECKGL_MUTATE_COLOR': `\n    image = vec4(soil_adjusted_vegetation_index_calc(image), 0., 0., 0.);\n    `\n  }\n};\n"],
  "mappings": "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",
  "names": ["import_core", "isEqual", "import_core", "import_shadertools", "import_core", "fs", "vs", "vs", "fs", "fs", "getUniforms", "fs", "getUniforms", "fs", "fs", "getUniforms", "fs", "getUniforms", "fs", "getUniforms", "fs", "getUniforms", "sigmoidalContrast", "fs", "getUniforms", "fs", "getUniforms", "fs", "inf", "getUniforms", "fs", "getUniforms", "fs", "fs", "fs", "fs"]
}
